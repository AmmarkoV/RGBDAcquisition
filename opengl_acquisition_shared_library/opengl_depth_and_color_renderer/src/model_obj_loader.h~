#ifndef MODEL_OBJ_LOADER_H_INCLUDED
#define MODEL_OBJ_LOADER_H_INCLUDED

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <GL/glut.h>
#include <GL/gl.h>
//#include "glext.h"
#include "auxiliary.h"
//#include "Volume_.h"

#ifdef WIN_32
	#include <windows.h>
#endif
#include <math.h>
#include <time.h>

//#include "bitmap.h"
#define TRUE 1
#define FALSE 0

#define PI 3.1415936


/* Mesh Structure*/
class MyMesh {
private:
		//the list of vertices
		Vertex *vertexlist;  
		//the list of normals
		Normal *normallist;
		//the list of texture coordinates
		TexCoords *texlist;
		////the list of materials
		Material *matlist;
		//the list of groups of our Mesh
		group *groups;
		//the list of faces
		Face *facelist;
		//the number of faces
		long unsigned int numfaces;
		
		//the center of our model
		GLfloat center[3];
		//the number of vertices
		long unsigned int numvertices;
		//the number of normals
		long unsigned int numnormals;
		//the number of texture coordinates
		long unsigned int numtexs;
		//the number of grups
		long unsigned int numgroups;
		//the number of materials
		long unsigned int nummaterials;

		
		//char name[30];

		//the name of the mtl file for the model
		char matlib[30];
		//the obj's filename
		char filename[60];
		//the display list id
		GLuint dispList;



public:
	//the bounding box for our model
	bbox BoundBox;
	

	MyMesh(char *filename);
	~MyMesh();
	
	/* Function for finding the material of a group*/
	GLuint FindMaterial( char *name);

	/* Function for finding a group*/
	int FindGroup(char *name);

	/* Function for adding a group to the model*/
	GLuint AddGroup( char *name);

	/* Read OBJ model function from .obj file */
	void ReadOBJ();

	/* Read MTL file */
	void Load_mtl(char *filename);


	/* Function for calculating the bounding box of a model */
	void calcbbox();

	/* Find the max dimension of tha model's bounding box */
	GLfloat findMax();


	/* Add a face to a group */
	void AddFacetoG(group *g,long unsigned int fc);

	/* scale the model at (sx, sy, sz)*/
	void ScaleM(GLfloat sx, GLfloat sy, GLfloat sz);

	/*Calculates the face normal ror all the faces of the model*/
	void PrepareObject();

	/* returns the display list id of this model*/
	GLuint getDispList();

	/*Compares and finds the maximum dimension of bounding box*/
	GLfloat findMax(int modelno);

	/*Draws the Model*/
	void DrawMesh();
	
	/*makes the display List*/
	void CompileList();

	/*has to do with the texture */
	void InitAutoTex(void);


	///////////////////////////////////////////

	bool FindIntersection(Face triangle, Vertex v1, Vertex v2, Vector &new_normal, Vector &intersection_point);

	bool FindIntersection(Vertex v1, Vertex v2, Vector& new_normal, Vector& intersection_point);

};


		

#endif
